{"version":3,"file":"static/js/463.f130df0e.chunk.js","mappings":"qMAIA,EAJe,WACb,OAAO,gBAAKA,UAAU,UAAS,SAAC,uDAClC,E,oBCCaC,EAAQC,EAAAA,MAAW,SAACC,GAC/B,OAA6BC,EAAAA,EAAAA,GAAQ,mBAAD,OAAoBD,EAAME,QAAtDC,EAAK,EAALA,MAAOC,EAAS,EAATA,UAIf,OAFAH,EAAAA,EAAAA,QAAgB,mBAAD,OAAoBD,EAAME,SAGvC,oCAAWF,GAAK,IAAEK,QAAS,KAAK,UAC9B,mBAAOC,SAAU,CAAC,EAAG,EAAG,GAAG,WACzB,iBAAMC,SAAUJ,EAAM,UAAUI,SAAUC,SAAUJ,EAAUK,EAAE,UAC9D,iCAAsBC,MAAOV,EAAMU,WAErC,iBAAMH,SAAUJ,EAAM,UAAUI,SAAUC,SAAUJ,EAAUO,EAAE,UAC9D,iCAAsBD,MAAO,gBAKvC,IC6BA,GA3CqBE,EAAAA,EAAAA,OACnBC,EAAAA,EAAAA,aAAW,WAAyBC,GAAS,IAA/BC,EAAI,EAAJA,KAAMC,EAAY,EAAZA,aAClB,EAA4BjB,EAAAA,UAAe,GAAM,eAA1CkB,EAAM,KAAEC,EAAS,KAExB,OACE,SAAC,EAAAC,SAAQ,CAACC,UAAU,SAAC,EAAM,IAAI,UAC7B,UAAC,KAAM,CACLC,OAAQ,CAAEJ,QAAQ,GAClBK,MAAO,CAAEC,OAAQ,SACjBC,OAAQ,CACNC,IAAK,GACLC,KAAM,GACNC,IAAK,IACLC,SAAUb,EAAKc,eAAiBd,EAAKc,eAAiB,EAAE,IAAK,IAAK,GAClEvB,SAAUS,EAAKe,eAAiBf,EAAKe,eAAiB,CAAC,EAAG,EAAG,IAE/DC,cAAe,SAACC,GAAC,OAAKC,YAAW,kBAAMf,GAAU,EAAK,GAAE,IAAI,EAC5DgB,aAAc,SAACF,GAAC,OAAKd,GAAU,EAAM,EAAC,WACtC,yBAAciB,UAAW,MACzB,0BACEC,MAAO,IACPb,OAAQ,IACRY,UAAW,IACXzB,MAAO,QACPkB,SAAU,EAAE,IAAK,IAAK,GACtBtB,SAAU,CAAC,EAAG,IAAK,GACnB+B,YAAU,KAEZ,SAAC,EAAAlB,SAAQ,CAACC,SAAU,KAAK,UACvB,SAACtB,EAAK,CACJI,MAAOa,EAAKb,MACZQ,MAAOM,EAAasB,IACpBC,MAAOxB,EAAKwB,MAAQxB,EAAKwB,MAAQ,CAAC,GAAK,GAAK,IAC5CjC,SAAUS,EAAKT,cAGnB,SAACkC,EAAA,EAAa,CAAC1B,IAAKA,EAAK2B,WAAYxB,EAAQyB,aAAczB,QAInE,I","sources":["components/Loader.jsx","components/Model.jsx","components/CanvasObject.jsx"],"sourcesContent":["const Loader = () => {\r\n  return <div className=\"loading\">Загрузка...</div>;\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\nimport { useGLTF } from \"@react-three/drei\";\n\nexport const Model = React.memo((props) => {\n  const { nodes, materials } = useGLTF(`./assets/models/${props.model}`);\n\n  useGLTF.preload(`./assets/models/${props.model}`);\n\n  return (\n    <group {...props} dispose={null}>\n      <group rotation={[0, 0, 0]}>\n        <mesh geometry={nodes[\"w1ll-k\"].geometry} material={materials.k}>\n          <meshStandardMaterial color={props.color} />\n        </mesh>\n        <mesh geometry={nodes[\"w1ll-b\"].geometry} material={materials.b}>\n          <meshStandardMaterial color={\"#fff\"} />\n        </mesh>\n      </group>\n    </group>\n  );\n});\n","import { OrbitControls } from \"@react-three/drei\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\nimport React, { forwardRef, memo, Suspense } from \"react\";\r\nimport Loader from \"./Loader\";\r\nimport { Model } from \"./Model\";\r\n\r\nconst CanvasObject = memo(\r\n  forwardRef(({ item, currentColor }, ref) => {\r\n    const [scroll, setScroll] = React.useState(false);\r\n\r\n    return (\r\n      <Suspense fallback={<Loader />}>\r\n        <Canvas\r\n          resize={{ scroll: false }}\r\n          style={{ height: \"140px\" }}\r\n          camera={{\r\n            fov: 10,\r\n            near: 0.1,\r\n            far: 5000,\r\n            position: item.cameraPosition ? item.cameraPosition : [-600, 500, 0],\r\n            rotation: item.cameraRotation ? item.cameraRotation : [0, 0, 0],\r\n          }}\r\n          onPointerOver={(e) => setTimeout(() => setScroll(true), 350)}\r\n          onPointerOut={(e) => setScroll(false)}>\r\n          <ambientLight intensity={0.5} />\r\n          <rectAreaLight\r\n            width={400}\r\n            height={400}\r\n            intensity={0.75}\r\n            color={\"white\"}\r\n            position={[-165, 100, 0]}\r\n            rotation={[0, 180, 0]}\r\n            castShadow\r\n          />\r\n          <Suspense fallback={null}>\r\n            <Model\r\n              model={item.model}\r\n              color={currentColor.hex}\r\n              scale={item.scale ? item.scale : [0.1, 0.1, 0.1]}\r\n              rotation={item.rotation}\r\n            />\r\n          </Suspense>\r\n          <OrbitControls ref={ref} enableZoom={scroll} enableRotate={scroll} />\r\n        </Canvas>\r\n      </Suspense>\r\n    );\r\n  })\r\n);\r\n\r\nexport default CanvasObject;\r\n"],"names":["className","Model","React","props","useGLTF","model","nodes","materials","dispose","rotation","geometry","material","k","color","b","memo","forwardRef","ref","item","currentColor","scroll","setScroll","Suspense","fallback","resize","style","height","camera","fov","near","far","position","cameraPosition","cameraRotation","onPointerOver","e","setTimeout","onPointerOut","intensity","width","castShadow","hex","scale","OrbitControls","enableZoom","enableRotate"],"sourceRoot":""}